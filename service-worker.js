!function(){"use strict";const e=["client/client.adcc5214.js","client/about.d9ec2dda.js","client/[slug].1db68356.js","client/index.b6a82992.js","client/index.1bbb3abc.js","client/client.c371e7d5.js"].concat(["service-worker-index.html","bear-brook/bridge-ruins.jpg","bear-brook/dog-wife-rock.jpg","bear-brook/empty-trail.jpg","bear-brook/perky-dog-river.jpg","bear-brook/pup-near-pines.jpg","bear-brook/toad.jpg","bear-brook/trail-map.jpg","blue-job/blue-job-summit.jpg","blue-job/little-blue-job-summit.jpg","blue-job/muddy-trail.jpg","blue-job/pond-view.jpg","blue-job/summit-wife-and-dog.jpg","favicon.png","global.css","homepage/couch-dog.jpg","homepage/summit-laying-down.jpg","logo-192.png","logo-512.png","manifest.json","moose-mtn-res/dog-on-trail.jpg","moose-mtn-res/nearing-the-summit.jpg","moose-mtn-res/parking-area.jpg","moose-mtn-res/trail-map.jpg","moose-mtn-res/trailhead.jpg","moose-mtn-res/wrong-road.jpg","mt-rowe/dog-and-wife-summit.jpg","mt-rowe/dog-on-trail.jpg","mt-rowe/drink.jpg","mt-rowe/happy-dog-trail.jpg","mt-rowe/sleepy-pup.jpg","mt-rowe/summit-full-dog.jpg","mt-rowe/summit-happy-dog.jpg","mt-rowe/summit-pano-left.jpg","mt-rowe/summit-pano-mid.jpg","mt-rowe/summit-pano-right.jpg","mt-rowe/trail-map-small.jpg","mt-rowe/trail-map.jpg","mt-rowe/usgs-earthquake-sensor.jpg","mt-rowe/wife-covered-head.jpg","tecumseh/chairlift-slope.jpg","tecumseh/dog-slope-landscape.jpg","tecumseh/dog-tongue-out.jpg","tecumseh/laying-down-after.jpg","tecumseh/northside-lift.jpg","tecumseh/rock-stairs.jpg","tecumseh/ski-slope-w-dog.jpg","tecumseh/stairs-w-dog.jpg","tecumseh/summit-approach.jpg","tecumseh/summit-landscape.jpg","tecumseh/summit-sign.jpg","tecumseh/trailhead.jpg"]),t=new Set(e);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1593948629205").then(t=>t.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const t of e)"cache1593948629205"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const o=new URL(e.request.url);o.protocol.startsWith("http")&&(o.hostname===self.location.hostname&&o.port!==self.location.port||(o.host===self.location.host&&t.has(o.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1593948629205").then(async t=>{try{const o=await fetch(e.request);return t.put(e.request,o.clone()),o}catch(o){const s=await t.match(e.request);if(s)return s;throw o}}))))})}();
